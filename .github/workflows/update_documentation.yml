name: Auto-Update Documentation

on:
  push:
    branches:
      - main # Trigger on pushes to your main branch (or 'master', etc.)

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permission to commit changes back to the repo

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          path: 'target_repo' # Checkout the target repository into 'target_repo' directory

      - name: Checkout RepoAgent
        uses: actions/checkout@v4
        with:
          repository: ssrin72/RepoAgent-gemini # Replace with your repo_agent repo path
          path: 'repo_agent_tool' # Checkout repo_agent into 'repo_agent_tool' directory

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies for RepoAgent
        working-directory: ./repo_agent_tool
        run: |
          python -m pip install --upgrade pip
          pip install -e . # Install repo_agent and its dependencies in editable mode
          # If -e . does not work or is not desired, list specific dependencies:
          # pip install llama-index-core llama-index-llms-gemini pydantic pydantic-settings iso639 loguru jedi tqdm markdown

      - name: Run documentation generation script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        working-directory: ./repo_agent_tool
        run: python scripts/generate_docs.py --target_repo_path ../target_repo

      - name: Check for changes and commit documentation
        id: commit
        working-directory: ./target_repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add markdown_docs .project_doc_record # Add your documentation output directories/files

          if ! git diff --staged --quiet; then
            git commit -m "Docs: Auto-generated documentation update [skip ci]"
            echo "::set-output name=committed::true"
          else
            echo "No documentation changes detected."
            echo "::set-output name=committed::false"
          fi

      - name: Push changes
        if: steps.commit.outputs.committed == 'true'
        working-directory: ./target_repo
        run: git push